
plugins {
    id 'java'
    id 'application'
//    pulls the correct platform dependent native libraries on the module path
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

group = 'io.github.vincemann'
version = '1.1.0'

// provides main module and class - analog to:
// --module io.github.vincemann.subtitlebuddy/io.github.vincemann.subtitlebuddy.Main
application {
    setMainModule('io.github.vincemann.subtitlebuddy')
    setMainClass('io.github.vincemann.subtitlebuddy.Main')
}


ext {
    javafxVersion = '17'
    // Default to linux platform if not provided [linux, mac, win]
    targetPlatform = project.hasProperty('targetPlatform') ? project.targetPlatform : 'linux'
}

jar {
    doFirst {
        archiveClassifier.set('')
        archiveFileName = "SubtitleBuddy-${project.version}-${targetPlatform}.jar"
    }
    manifest {
        attributes(
                'Main-Class': application.getMainClass().get()
        )
    }
}

test {

    doFirst {
        jvmArgs = [
                "--module-path", classpath.asPath,
                '--add-modules', javafx.getModules().join(','),
//                resolve some issues with javafx and testfx
                '--add-reads', 'org.apache.commons.configuration2=ALL-UNNAMED',
                '--add-exports', 'javafx.graphics/com.sun.javafx.application=org.testfx',
                '--add-opens', 'javafx.graphics/com.sun.javafx.application=org.testfx'
        ]
    }
}

// create minimal runtime image, only containing the modules needed for the application
// also ships jdk modules needed -> standalone executable
tasks.register("createRuntimeImage", Exec){
    dependsOn 'jar'
    doFirst {
        mkdir 'build/image'

        def modulePath = sourceSets.main.runtimeClasspath.asPath
        // Print the module path for debugging
        println("Module path: $modulePath")

        def modules = javafx.getModules()
        modules.add(application.mainModule.get())

        println("Modules: $modules")

        def modulesString = modules.join(',')

//        javafx plugin already puts the correct platform dependent native libraries on the module path
//        my application jar or build/classes is also on the module path by default
        commandLine 'jlink',
                '--module-path', modulePath,
                '--add-modules', modulesString,
                '--output', 'build/image',
                '--strip-debug',
                '--compress', '2',
                '--no-header-files',
                '--no-man-pages'
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
//    makes sure module path is correctly set up
    modularity.inferModulePath.set(true)
}


run {
    doFirst {
        jvmArgs = [
                "--module-path", classpath.asPath,
//                modules are not part of sdk anymore - need to add them manually to module graph
                "--add-modules", javafx.getModules().join(","),
                '--add-reads', 'org.apache.commons.configuration2=ALL-UNNAMED',
        ]
    }
}

javafx {
    version = "17"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
    platform = targetPlatform
}


repositories {
    mavenCentral()
}


dependencies {

    // need to use old version bc of segfaults on linux + keyboard strokes not working
    // needed to self modularize the jar in order to include for whatever reason + this way I can build a custom jlink image
    // bc cant use automatic modules in jlink
    implementation files('lib/jnativehook-2.0.2-patched.jar')

    // dependency injection
    implementation('com.google.inject:guice:7.0.0')
    implementation('com.google.inject.extensions:guice-assistedinject:7.0.0')
    implementation('com.google.inject.extensions:guice-multibindings:4.2.3')
    implementation('commons-io:commons-io:2.16.1')

    // logging
    implementation platform('org.apache.logging.log4j:log4j-bom:2.23.1')
    implementation 'org.slf4j:slf4j-api'
    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl'
    implementation 'org.apache.logging.log4j:log4j-api'
    runtimeOnly 'org.apache.logging.log4j:log4j-core'

    // validation
    implementation('javax.validation:validation-api:2.0.1.Final')

    // event handling
    implementation('com.google.guava:guava:33.0.0-jre')

    // utils
    // only needed for compilation - not at runtime
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    implementation('org.apache.commons:commons-configuration2:2.10.1')
    implementation('org.apache.commons:commons-lang3:3.12.0')
    // some other dep depends on this
    implementation 'commons-beanutils:commons-beanutils:1.9.4'


    // TESTING
    testImplementation('org.testfx:testfx-core:4.0.18') {
        exclude module: 'hamcrest-all'
    }
    testImplementation('org.testfx:testfx-junit:4.0.18') {
        exclude module: 'hamcrest-core'
    }
    testImplementation('org.loadui:testFx:3.1.2')
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation "junit:junit:4.13.2"
}
